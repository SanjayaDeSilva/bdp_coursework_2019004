{"paragraphs":[{"text":"%pyspark\n\n# Load csv to the spark datafarme\ndf = spark.read.csv(\"/data/listings.csv\", header=\"true\", inferSchema=\"true\")\n# show first 5 rec\ndf.head(5)","user":"anonymous","dateUpdated":"2020-01-10T11:56:38+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(id=u'49091', name=u'COZICOMFORT LONG TERM STAY ROOM 2', host_id=u'266763', host_name=u'Francesca', neighbourhood_group=u'North Region', neighbourhood=u'Woodlands', latitude=1.44255, longitude=u'103.7958', room_type=u'Private room', price=83, minimum_nights=180, number_of_reviews=u'1', last_review=u'2013-10-21', reviews_per_month=0.01, calculated_host_listings_count=2, availability_365=365),\n Row(id=u'50646', name=u'Pleasant Room along Bukit Timah', host_id=u'227796', host_name=u'Sujatha', neighbourhood_group=u'Central Region', neighbourhood=u'Bukit Timah', latitude=1.33235, longitude=u'103.78521', room_type=u'Private room', price=81, minimum_nights=90, number_of_reviews=u'18', last_review=u'2014-12-26', reviews_per_month=0.28, calculated_host_listings_count=1, availability_365=365),\n Row(id=u'56334', name=u'COZICOMFORT', host_id=u'266763', host_name=u'Francesca', neighbourhood_group=u'North Region', neighbourhood=u'Woodlands', latitude=1.44246, longitude=u'103.79667', room_type=u'Private room', price=69, minimum_nights=6, number_of_reviews=u'20', last_review=u'2015-10-01', reviews_per_month=0.2, calculated_host_listings_count=2, availability_365=365),\n Row(id=u'71609', name=u'Ensuite Room (Room 1 & 2) near EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34541, longitude=u'103.95712', room_type=u'Private room', price=206, minimum_nights=1, number_of_reviews=u'14', last_review=u'2019-08-11', reviews_per_month=0.15, calculated_host_listings_count=9, availability_365=353),\n Row(id=u'71896', name=u'B&B  Room 1 near Airport & EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34567, longitude=u'103.95963', room_type=u'Private room', price=94, minimum_nights=1, number_of_reviews=u'22', last_review=u'2019-07-28', reviews_per_month=0.22, calculated_host_listings_count=9, availability_365=355)]"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=625","http://172.17.0.3:4040/jobs/job?id=626","http://172.17.0.3:4040/jobs/job?id=627"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517297_263841567","id":"20200101-165626_311627919","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:38+0000","dateFinished":"2020-01-10T11:56:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4245"},{"text":"%pyspark\n\n#get datatypes\ndf.dtypes\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:38+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[('id', 'string'),\n ('name', 'string'),\n ('host_id', 'string'),\n ('host_name', 'string'),\n ('neighbourhood_group', 'string'),\n ('neighbourhood', 'string'),\n ('latitude', 'double'),\n ('longitude', 'string'),\n ('room_type', 'string'),\n ('price', 'int'),\n ('minimum_nights', 'int'),\n ('number_of_reviews', 'string'),\n ('last_review', 'string'),\n ('reviews_per_month', 'double'),\n ('calculated_host_listings_count', 'int'),\n ('availability_365', 'int')]"}]},"apps":[],"jobName":"paragraph_1578642517303_1347495512","id":"20200101-170127_1199547672","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:39+0000","dateFinished":"2020-01-10T11:56:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4246"},{"text":"%pyspark\n\n#2.3 \n#1. Percentage of owners who rent more than one property.\n\nfrom pyspark.sql import *\n\n#DF as a SQL tem view\ndf.createOrReplaceTempView(\"listing_temp_tbl\")\n#df.show()\n#Fetch the count of tot owners \nowners = spark.sql(\"select host_id, host_name, COUNT(*) as Properties from listing_temp_tbl group by host_id, host_name Order by Properties DESC\")\nOwnersCount=owners.count()\n\n\n# Getting the count of tot no of multiple property owners \nownersgtone = spark.sql(\"select host_id, host_name, COUNT(*) as Properties from listing_temp_tbl group by host_id, host_name HAVING Properties>1 Order by Properties DESC\")\nownersgtone_1=ownersgtone.count()\npercentageOfMultipleOwners = (float(ownersgtone_1)/OwnersCount)*100.0\nprint(\"***Percentage of owners who rent more than one property***\")\nprint(percentageOfMultipleOwners)","user":"anonymous","dateUpdated":"2020-01-10T11:56:39+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"***Percentage of owners who rent more than one property***\n27.3163528977\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=628","http://172.17.0.3:4040/jobs/job?id=629","http://172.17.0.3:4040/jobs/job?id=630","http://172.17.0.3:4040/jobs/job?id=631"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517303_-102980173","id":"20200101-173710_1824268618","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:39+0000","dateFinished":"2020-01-10T11:56:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4247"},{"text":"%pyspark\n#2.3 \n#2. Histogram of number of rentals reviewed over time (based on last_review) in mouth granularity.\nimport pandas as pd \nfrom pyspark.sql.functions import *\nhistogramdf = spark.sql(\"Select month(last_review)month  ,count(*)as sum from listing_temp_tbl where month(last_review) is not null group by month order by month\")\nprint(histogramdf.show())\n\nhistogramdfpandas = histogramdf.toPandas()\nhistPlot = histogramdfpandas.plot.bar(x='month', y='sum', color='orange')\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+----+\n|month| sum|\n+-----+----+\n|    1| 241|\n|    2| 236|\n|    3| 235|\n|    4| 249|\n|    5| 334|\n|    6| 455|\n|    7| 983|\n|    8|1822|\n|    9| 149|\n|   10| 125|\n|   11| 111|\n|   12| 201|\n+-----+----+\n\nNone\n<matplotlib.figure.Figure at 0x7fcd4051b0d0>\n"},{"type":"IMG","data":"\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=632","http://172.17.0.3:4040/jobs/job?id=633","http://172.17.0.3:4040/jobs/job?id=634"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578653943969_337319018","id":"20200110-105903_1982355018","dateCreated":"2020-01-10T10:59:03+0000","dateStarted":"2020-01-10T11:56:41+0000","dateFinished":"2020-01-10T11:56:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4248"},{"text":"%pyspark\n\n#2.3 \n#3. Number of rentals that are available all 365 days of the year for each neighbourhood, that are in the neighbourhood which have top 5 average rental prices.\ntop5Arentals = spark.sql(\"Select * from listing_temp_tbl  where  cast(availability_365 as string)like '%365%'\")\ntop5Arentals.createOrReplaceTempView(\"listingtemptable_365\")\ndf1=spark.sql(\" select * from listingtemptable_365 \")\n#df1.show()\ntop5Arentals1 = spark.sql(\"Select neighbourhood_group, neighbourhood, count(*) as count from listingtemptable_365 where neighbourhood in (Select neighbourhood  From listingtemptable_365 Group By neighbourhood_group, neighbourhood  order By avg(price) Limit 5)  group by neighbourhood_group, neighbourhood\")\n\ntop5Arentals1.show()\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:43+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+-----+\n|neighbourhood_group|       neighbourhood|count|\n+-------------------+--------------------+-----+\n|        West Region|Western Water Cat...|    1|\n|        West Region|       Bukit Panjang|    1|\n|       North Region|           Woodlands|   12|\n|  North-East Region|           Serangoon|    8|\n|       North Region|        Lim Chu Kang|    1|\n+-------------------+--------------------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=635","http://172.17.0.3:4040/jobs/job?id=636","http://172.17.0.3:4040/jobs/job?id=637","http://172.17.0.3:4040/jobs/job?id=638","http://172.17.0.3:4040/jobs/job?id=639","http://172.17.0.3:4040/jobs/job?id=640"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517305_1911207935","id":"20200106-145333_1998929540","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:43+0000","dateFinished":"2020-01-10T11:56:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4249"},{"text":"%pyspark\n\n# 3.ML on the Singapore Airbnb Data\n\nfrom pyspark.sql import SparkSession, Row, functions, types\nfrom pyspark.sql.functions import udf\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom pyspark.ml.feature import HashingTF, IDF, Tokenizer, VectorAssembler, StringIndexer\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.ml.classification import NaiveBayes\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.linalg import Vectors\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD\nfrom pyspark.sql.functions import col\nimport pandas as pd \nimport numpy as np \nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import when\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import lit\nfrom datetime import date\nfrom pyspark.sql.types import StructField\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.types import *\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:45+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578642517306_1465857164","id":"20200109-230226_1861914284","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:45+0000","dateFinished":"2020-01-10T11:56:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4251"},{"text":"%pyspark\n#3.Data Preprocessing\n#COlumns need tor the model tarining and make a new dataframe \nfeatures=['id','latitude','longitude','neighbourhood_group']\ndf_training = df.select(features)\n#df_training.show()\ndf_training = df_training.na.drop()\ndf_training = df_training.withColumn(\"longitude\", df_training[\"longitude\"].cast(DoubleType()))\ndf_training.printSchema()\n\ndf_training.createOrReplaceTempView(\"listings_view\")\n\ndf1_training = spark.sql(\"select  neighbourhood_group, count(id) id_count from listings_view group by neighbourhood_group order by id_count DESC\")\n#df1_training.show()\n#Ignore the neighbourhood group in which they have count less than 10\n\ndef valueToInt(value):\n    if value=='Central Region': return 1\n    elif value=='West Region': return  2\n    elif value=='East Region': return 3\n    elif value=='North-East Region': return 4\n    elif value=='North Region': return 5\n    else: return 6\n    \nudfValueToInt = udf(valueToInt, IntegerType())\ndf1_training = df_training.withColumn(\"label_column\", udfValueToInt(\"neighbourhood_group\"))\ndf2_training = df1_training.filter(df1_training['label_column'] < 6)\ndf2_training.show()\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:45+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: double (nullable = true)\n |-- neighbourhood_group: string (nullable = true)\n\n+------+--------+---------+-------------------+------------+\n|    id|latitude|longitude|neighbourhood_group|label_column|\n+------+--------+---------+-------------------+------------+\n| 49091| 1.44255| 103.7958|       North Region|           5|\n| 50646| 1.33235|103.78521|     Central Region|           1|\n| 56334| 1.44246|103.79667|       North Region|           5|\n| 71609| 1.34541|103.95712|        East Region|           3|\n| 71896| 1.34567|103.95963|        East Region|           3|\n| 71903| 1.34702|103.96103|        East Region|           3|\n| 71907| 1.34348|103.96337|        East Region|           3|\n|241503| 1.32304|103.91363|        East Region|           3|\n|241508| 1.32458|103.91163|        East Region|           3|\n|241510| 1.32461|103.91191|        East Region|           3|\n|275343| 1.28875|103.80814|     Central Region|           1|\n|275344| 1.28837|103.81099|     Central Region|           1|\n|289234| 1.34561|103.95984|        East Region|           3|\n|294281| 1.31125|103.83816|     Central Region|           1|\n|324945| 1.28976|103.80896|     Central Region|           1|\n|330089| 1.28677|103.81244|     Central Region|           1|\n|330095| 1.28537|103.81087|     Central Region|           1|\n|344803| 1.34943|103.95951|        East Region|           3|\n|355955|  1.3142|103.90232|     Central Region|           1|\n|369141|  1.3115|103.83759|     Central Region|           1|\n+------+--------+---------+-------------------+------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=641"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517306_-1847834841","id":"20200109-231215_1083733324","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:45+0000","dateFinished":"2020-01-10T11:56:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4252"},{"text":"%pyspark\ndef vectAssembler(df,impFeatures):\n\tprint(\"Vector assembler \")\n\tassembler = VectorAssembler(inputCols=impFeatures,outputCol=\"features\")\n\tdf_new=assembler.transform(df)\n\tprint(\"vector assembling is done.\")\n\treturn df_new\nimpFeatures=['latitude','longitude']\nimpdf = df2_training.select(impFeatures).show()\n# Create a feature vector column using latitude and longitude \ndtf=vectAssembler(df2_training,impFeatures)\n\nfinalized_data = dtf.select('label_column', 'features')\nfrom pyspark.ml.feature import StandardScaler\nscaler = StandardScaler(inputCol='features', outputCol='scaledFeatures', withStd=True, withMean=True)\nscalerModel = scaler.fit(finalized_data)\nclassiFinalData = scalerModel.transform(finalized_data)\n\n# Splitting data into training and test sets (30% for testing)\n(trainingData, testData) = classiFinalData.randomSplit([0.7, 0.3])\n\ntrainingData.show()","user":"anonymous","dateUpdated":"2020-01-10T11:56:45+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+---------+\n|latitude|longitude|\n+--------+---------+\n| 1.44255| 103.7958|\n| 1.33235|103.78521|\n| 1.44246|103.79667|\n| 1.34541|103.95712|\n| 1.34567|103.95963|\n| 1.34702|103.96103|\n| 1.34348|103.96337|\n| 1.32304|103.91363|\n| 1.32458|103.91163|\n| 1.32461|103.91191|\n| 1.28875|103.80814|\n| 1.28837|103.81099|\n| 1.34561|103.95984|\n| 1.31125|103.83816|\n| 1.28976|103.80896|\n| 1.28677|103.81244|\n| 1.28537|103.81087|\n| 1.34943|103.95951|\n|  1.3142|103.90232|\n|  1.3115|103.83759|\n+--------+---------+\nonly showing top 20 rows\n\nVector assembler \nvector assembling is done.\n+------------+-------------------+--------------------+\n|label_column|           features|      scaledFeatures|\n+------------+-------------------+--------------------+\n|           1|[1.24387,103.84246]|[-2.3040593559511...|\n|           1|[1.24391,103.83915]|[-2.3027486080223...|\n|           1|[1.24853,103.82502]|[-2.1513572222400...|\n|           1|[1.24881,103.82364]|[-2.1421819867381...|\n|           1|[1.24918,103.82509]|[-2.1300575683962...|\n|           1|[1.24992,103.82441]|[-2.1058087317125...|\n|           1| [1.2504,103.82539]|[-2.0900797565663...|\n|           1|[1.25046,103.82529]|[-2.0881136346730...|\n|           1|[1.25054,103.82551]|[-2.0854921388153...|\n|           1|[1.25088,103.82482]|[-2.0743507814200...|\n|           1|[1.25284,103.82225]|[-2.0101241329064...|\n|           1|[1.25306,103.82268]|[-2.0029150192977...|\n|           1|  [1.25602,103.821]|[-1.9059196725627...|\n|           1|[1.25639,103.82302]|[-1.8937952542209...|\n|           1|[1.26478,103.81762]|[-1.6188658761444...|\n|           1| [1.26504,103.8146]|[-1.6103460146069...|\n|           1|[1.26513,103.81722]|[-1.6073968317669...|\n|           1|[1.26569,103.81606]|[-1.5890463607630...|\n|           1|[1.26582,103.81531]|[-1.5847864299943...|\n|           1|[1.26603,103.81693]|[-1.5779050033678...|\n+------------+-------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=642","http://172.17.0.3:4040/jobs/job?id=643","http://172.17.0.3:4040/jobs/job?id=644"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517307_-1869349298","id":"20200109-232139_209855726","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:45+0000","dateFinished":"2020-01-10T11:56:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4253"},{"text":"%pyspark\ndef LRTraining(trainDF):\n\tprint(\"Model fitting started\")\n\tlr = LogisticRegression(labelCol=\"label_column\", featuresCol=\"scaledFeatures\",elasticNetParam=0.8, family=\"multinomial\",maxIter=120)\n\tmodel=lr.fit(trainDF)\n\tprint(\"Model fitting completed\")\n\treturn model \n\t\nmodel = LRTraining(trainingData)\n\n# Get predictions.\npredictions = model.transform(testData)\n\n# Predicted data \npredictions.select(\"prediction\", \"label_column\", \"features\").show(5)","user":"anonymous","dateUpdated":"2020-01-10T11:56:46+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Model fitting started\nModel fitting completed\n+----------+------------+-------------------+\n|prediction|label_column|           features|\n+----------+------------+-------------------+\n|       1.0|           1|[1.24526,103.83999]|\n|       1.0|           1|[1.24847,103.82389]|\n|       1.0|           1|[1.26649,103.81585]|\n|       1.0|           1|[1.26675,103.81219]|\n|       1.0|           1|[1.26713,103.81156]|\n+----------+------------+-------------------+\nonly showing top 5 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=645","http://172.17.0.3:4040/jobs/job?id=646","http://172.17.0.3:4040/jobs/job?id=647","http://172.17.0.3:4040/jobs/job?id=648","http://172.17.0.3:4040/jobs/job?id=649","http://172.17.0.3:4040/jobs/job?id=650","http://172.17.0.3:4040/jobs/job?id=651","http://172.17.0.3:4040/jobs/job?id=652","http://172.17.0.3:4040/jobs/job?id=653","http://172.17.0.3:4040/jobs/job?id=654","http://172.17.0.3:4040/jobs/job?id=655","http://172.17.0.3:4040/jobs/job?id=656","http://172.17.0.3:4040/jobs/job?id=657","http://172.17.0.3:4040/jobs/job?id=658","http://172.17.0.3:4040/jobs/job?id=659","http://172.17.0.3:4040/jobs/job?id=660","http://172.17.0.3:4040/jobs/job?id=661","http://172.17.0.3:4040/jobs/job?id=662","http://172.17.0.3:4040/jobs/job?id=663","http://172.17.0.3:4040/jobs/job?id=664","http://172.17.0.3:4040/jobs/job?id=665","http://172.17.0.3:4040/jobs/job?id=666","http://172.17.0.3:4040/jobs/job?id=667","http://172.17.0.3:4040/jobs/job?id=668","http://172.17.0.3:4040/jobs/job?id=669","http://172.17.0.3:4040/jobs/job?id=670","http://172.17.0.3:4040/jobs/job?id=671","http://172.17.0.3:4040/jobs/job?id=672","http://172.17.0.3:4040/jobs/job?id=673","http://172.17.0.3:4040/jobs/job?id=674","http://172.17.0.3:4040/jobs/job?id=675","http://172.17.0.3:4040/jobs/job?id=676","http://172.17.0.3:4040/jobs/job?id=677","http://172.17.0.3:4040/jobs/job?id=678","http://172.17.0.3:4040/jobs/job?id=679","http://172.17.0.3:4040/jobs/job?id=680","http://172.17.0.3:4040/jobs/job?id=681","http://172.17.0.3:4040/jobs/job?id=682","http://172.17.0.3:4040/jobs/job?id=683","http://172.17.0.3:4040/jobs/job?id=684","http://172.17.0.3:4040/jobs/job?id=685","http://172.17.0.3:4040/jobs/job?id=686","http://172.17.0.3:4040/jobs/job?id=687","http://172.17.0.3:4040/jobs/job?id=688","http://172.17.0.3:4040/jobs/job?id=689","http://172.17.0.3:4040/jobs/job?id=690","http://172.17.0.3:4040/jobs/job?id=691","http://172.17.0.3:4040/jobs/job?id=692","http://172.17.0.3:4040/jobs/job?id=693","http://172.17.0.3:4040/jobs/job?id=694","http://172.17.0.3:4040/jobs/job?id=695","http://172.17.0.3:4040/jobs/job?id=696","http://172.17.0.3:4040/jobs/job?id=697","http://172.17.0.3:4040/jobs/job?id=698","http://172.17.0.3:4040/jobs/job?id=699","http://172.17.0.3:4040/jobs/job?id=700","http://172.17.0.3:4040/jobs/job?id=701","http://172.17.0.3:4040/jobs/job?id=702","http://172.17.0.3:4040/jobs/job?id=703","http://172.17.0.3:4040/jobs/job?id=704","http://172.17.0.3:4040/jobs/job?id=705","http://172.17.0.3:4040/jobs/job?id=706","http://172.17.0.3:4040/jobs/job?id=707","http://172.17.0.3:4040/jobs/job?id=708","http://172.17.0.3:4040/jobs/job?id=709","http://172.17.0.3:4040/jobs/job?id=710","http://172.17.0.3:4040/jobs/job?id=711","http://172.17.0.3:4040/jobs/job?id=712","http://172.17.0.3:4040/jobs/job?id=713","http://172.17.0.3:4040/jobs/job?id=714","http://172.17.0.3:4040/jobs/job?id=715","http://172.17.0.3:4040/jobs/job?id=716","http://172.17.0.3:4040/jobs/job?id=717","http://172.17.0.3:4040/jobs/job?id=718","http://172.17.0.3:4040/jobs/job?id=719","http://172.17.0.3:4040/jobs/job?id=720","http://172.17.0.3:4040/jobs/job?id=721","http://172.17.0.3:4040/jobs/job?id=722","http://172.17.0.3:4040/jobs/job?id=723","http://172.17.0.3:4040/jobs/job?id=724","http://172.17.0.3:4040/jobs/job?id=725","http://172.17.0.3:4040/jobs/job?id=726","http://172.17.0.3:4040/jobs/job?id=727","http://172.17.0.3:4040/jobs/job?id=728","http://172.17.0.3:4040/jobs/job?id=729","http://172.17.0.3:4040/jobs/job?id=730","http://172.17.0.3:4040/jobs/job?id=731","http://172.17.0.3:4040/jobs/job?id=732","http://172.17.0.3:4040/jobs/job?id=733","http://172.17.0.3:4040/jobs/job?id=734","http://172.17.0.3:4040/jobs/job?id=735","http://172.17.0.3:4040/jobs/job?id=736","http://172.17.0.3:4040/jobs/job?id=737"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517307_1365700946","id":"20200109-232615_603876800","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:46+0000","dateFinished":"2020-01-10T11:56:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4254"},{"text":"%pyspark\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD\n\nevaluatorRecall = MulticlassClassificationEvaluator(labelCol=\"label_column\", predictionCol=\"prediction\", metricName=\"weightedRecall\")\nevaluatorPrecision = MulticlassClassificationEvaluator(labelCol=\"label_column\", predictionCol=\"prediction\", metricName=\"weightedPrecision\")\nrecall = evaluatorRecall.evaluate(predictions)\nprecision = evaluatorPrecision.evaluate(predictions)\nprint(\"Recall %s\" % recall)\nprint(\"Precision %s\" % precision)","user":"anonymous","dateUpdated":"2020-01-10T11:56:48+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Recall 0.983160621762\nPrecision 0.983975009575\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=738","http://172.17.0.3:4040/jobs/job?id=739","http://172.17.0.3:4040/jobs/job?id=740","http://172.17.0.3:4040/jobs/job?id=741","http://172.17.0.3:4040/jobs/job?id=742"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517308_1427298834","id":"20200109-232850_1711920911","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:48+0000","dateFinished":"2020-01-10T11:56:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4255"},{"text":"%pyspark\n\n#4. Presentation of the analysis for Singapore Airbnb Data\n#1.  Total number of rentals that are available 365 days a year, and the total number of rentals.(As numbers)\ndf_tot_rental=spark.sql(\"select count(*)totalrentals from  listing_temp_tbl \")\ndf_tot_rental.show()\ndf_df_tot_rental_av_365=spark.sql(\"select count(*)totalrentals_ava_365 from  listing_temp_tbl where availability_365=365 \")\ndf_df_tot_rental_av_365.show()\n\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+\n|totalrentals|\n+------------+\n|        7921|\n+------------+\n\n+--------------------+\n|totalrentals_ava_365|\n+--------------------+\n|                 843|\n+--------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=743","http://172.17.0.3:4040/jobs/job?id=744"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517308_-185218320","id":"20200106-164607_476645118","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:49+0000","dateFinished":"2020-01-10T11:56:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4256"},{"text":"%pyspark\n#2.  Number of rentals per neighbourhood_group (As a bar chart)\n\ndf_rentalsperneighbourhd=spark.sql(\"select neighbourhood_group,count(*)count  from  listing_temp_tbl group by neighbourhood_group  order by count desc limit 5\")\ndf_rentalsperneighbourhd.show()\n\nhistogramdfpandas = df_rentalsperneighbourhd.toPandas()\nhistPlot = histogramdfpandas.plot.bar(x='neighbourhood_group', y='count', color='b')","user":"anonymous","dateUpdated":"2020-01-10T11:56:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+-----+\n|neighbourhood_group|count|\n+-------------------+-----+\n|     Central Region| 6301|\n|        West Region|  539|\n|        East Region|  508|\n|  North-East Region|  344|\n|       North Region|  203|\n+-------------------+-----+\n\n<matplotlib.figure.Figure at 0x7fcd0c2e2b10>\n"},{"type":"IMG","data":"\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=745","http://172.17.0.3:4040/jobs/job?id=746"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517309_1346583329","id":"20200109-233357_954801382","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:49+0000","dateFinished":"2020-01-10T11:56:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4257"},{"text":"%pyspark\n#3 Average price of private room by neighbourhood group.\ndf_avgpricebyneibourgoodgroup=spark.sql(\"select neighbourhood_group,avg(cast(price as float))avg_price  from  listing_temp_tbl where room_type = 'Private room' group by neighbourhood_group  order by avg_price desc limit 5\")\ndf_avgpricebyneibourgoodgroup.show()\nhistogramdfpandas = df_avgpricebyneibourgoodgroup.toPandas()\nhistPlot = histogramdfpandas.plot.bar(x='neighbourhood_group', y='avg_price', color='g')\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:51+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|neighbourhood_group|         avg_price|\n+-------------------+------------------+\n|        West Region|117.82539682539682|\n|        East Region|117.23497267759562|\n|     Central Region|114.47408742676882|\n|       North Region| 82.35460992907801|\n|  North-East Region| 80.06296296296296|\n+-------------------+------------------+\n\n<matplotlib.figure.Figure at 0x7fcd0c6b41d0>\n"},{"type":"IMG","data":"\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=747","http://172.17.0.3:4040/jobs/job?id=748"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517309_276422112","id":"20200109-234039_2098287032","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:51+0000","dateFinished":"2020-01-10T11:56:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4258"},{"text":"%pyspark\n\n#4 Top 10 neighbourhood based on Average price of Private room\ndf_avgpricebyneibourhood=spark.sql(\"select neighbourhood_group, neighbourhood,avg(cast(price as float))avg_price  from  listing_temp_tbl where room_type = 'Private room' group by neighbourhood_group,neighbourhood  order by avg_price desc limit 10\")\ndf_avgpricebyneibourhood.show()\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:52+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+----------------+------------------+\n|neighbourhood_group|   neighbourhood|         avg_price|\n+-------------------+----------------+------------------+\n|     Central Region|Southern Islands| 649.6666666666666|\n|     Central Region|    Marina South|             419.0|\n|        West Region|   Bukit Panjang|409.44827586206895|\n|        West Region|     Jurong East|182.25757575757575|\n|     Central Region|   Downtown Core| 163.5047619047619|\n|     Central Region| Singapore River|150.66666666666666|\n|     Central Region|         Orchard|146.89795918367346|\n|     Central Region|       Toa Payoh|            142.78|\n|     Central Region|          Bishan|138.92105263157896|\n|     Central Region|          Outram|135.26639344262296|\n+-------------------+----------------+------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=749"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517309_-1196505827","id":"20200109-234724_1842709463","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:52+0000","dateFinished":"2020-01-10T11:56:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4259"},{"text":"%pyspark\n# 5 lowest price per each room type \ndf_avgpricebyneibourhood=spark.sql(\"select neighbourhood_group, neighbourhood,price  from  listing_temp_tbl where room_type = 'Private room' order by price asc limit 5\")\ndf_avgpricebyneibourhood.show()\ndf_avgpricebyneibourhood=spark.sql(\"select neighbourhood_group, neighbourhood,price  from  listing_temp_tbl where room_type = 'Shared room' order by price asc limit 5\")\ndf_avgpricebyneibourhood.show()\ndf_avgpricebyneibourhood=spark.sql(\"select neighbourhood_group, neighbourhood,price  from  listing_temp_tbl where room_type = 'Entire home/apt' order by price asc limit 5\")\ndf_avgpricebyneibourhood.show()","user":"anonymous","dateUpdated":"2020-01-10T11:56:53+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":508,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+-------------+-----+\n|neighbourhood_group|neighbourhood|price|\n+-------------------+-------------+-----+\n|     Central Region|Marine Parade|   14|\n|     Central Region|      Geylang|   15|\n|     Central Region|       Outram|   15|\n|        East Region|     Tampines|   15|\n|        West Region|  Jurong West|   15|\n+-------------------+-------------+-----+\n\n+-------------------+-------------+-----+\n|neighbourhood_group|neighbourhood|price|\n+-------------------+-------------+-----+\n|        East Region|        Bedok|   14|\n|        West Region|  Jurong West|   15|\n|     Central Region|      Kallang|   18|\n|     Central Region|       Rochor|   18|\n|     Central Region|      Kallang|   19|\n+-------------------+-------------+-----+\n\n+-------------------+-------------+-----+\n|neighbourhood_group|neighbourhood|price|\n+-------------------+-------------+-----+\n|     Central Region|       Rochor|    0|\n|     Central Region|      Geylang|   14|\n|        West Region|Bukit Panjang|   14|\n|     Central Region|  Bukit Timah|   31|\n|       North Region|       Yishun|   39|\n+-------------------+-------------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=750","http://172.17.0.3:4040/jobs/job?id=751","http://172.17.0.3:4040/jobs/job?id=752"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517310_-104801975","id":"20200106-172332_1291313128","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:53+0000","dateFinished":"2020-01-10T11:56:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4260"},{"text":"%pyspark\nimport matplotlib.pyplot as plt\n#Percentage of owners who rent more than one property\n\n# Getting the count of total number of owners \nowners = spark.sql(\"select host_id, host_name, COUNT(*) as Properties from listing_temp_tbl group by host_id, host_name Order by Properties DESC\")\n#print(owners.show())\n##Get the owners count\nOwnersCount=owners.count()\n\n\n# Getting the count of total number of multiple property owners \nownersgtone = spark.sql(\"select host_id, host_name, COUNT(*) as Properties from listing_temp_tbl group by host_id, host_name HAVING Properties>1 Order by Properties DESC\")\nownersgtone_1=ownersgtone.count()\npercentageOfMultipleOwners = (float(ownersgtone_1)/OwnersCount)*100.0\nprint(\"###########Percentage of owners who rent more than one property##################\")\nprint(percentageOfMultipleOwners)\n\n\n# Data to plot\nlabels = 'Multiple Properties', 'One Property'\nsizes = [percentageOfMultipleOwners, 100-percentageOfMultipleOwners, ]\ncolors = ['gold', 'yellowgreen']\nexplode = (0.1, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.show()","user":"anonymous","dateUpdated":"2020-01-10T11:56:53+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"editorHide":false},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=753","http://172.17.0.3:4040/jobs/job?id=754","http://172.17.0.3:4040/jobs/job?id=755","http://172.17.0.3:4040/jobs/job?id=756"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517310_-451615171","id":"20200109-235852_14939391","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:53+0000","dateFinished":"2020-01-10T11:56:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4261","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"###########Percentage of owners who rent more than one property##################\n27.3163528977\n<matplotlib.figure.Figure at 0x7fcd0c2ca910>\n"},{"type":"IMG","data":"\n"}]}},{"text":"%pyspark\nimport pandas as pd \nfrom pyspark.sql.functions import *\nhistogramdf = spark.sql(\"Select month(last_review)month  ,count(*)as sum from listing_temp_tbl where month(last_review) is not null group by month order by month\")\nprint(histogramdf.show())\n\nhistogramdfpandas = histogramdf.toPandas()\nhistPlot = histogramdfpandas.plot.bar(x='month', y='sum', color='orange')\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:56+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+----+\n|month| sum|\n+-----+----+\n|    1| 241|\n|    2| 236|\n|    3| 235|\n|    4| 249|\n|    5| 334|\n|    6| 455|\n|    7| 983|\n|    8|1822|\n|    9| 149|\n|   10| 125|\n|   11| 111|\n|   12| 201|\n+-----+----+\n\nNone\n\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7fcd05ee2bd0>"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=757","http://172.17.0.3:4040/jobs/job?id=758","http://172.17.0.3:4040/jobs/job?id=759"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578642517311_596547119","id":"20200110-000723_185567494","dateCreated":"2020-01-10T07:48:37+0000","dateStarted":"2020-01-10T11:56:56+0000","dateFinished":"2020-01-10T11:56:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4262"},{"text":"%pyspark\ntop5Arentals = spark.sql(\"Select * from listing_temp_tbl  where  cast(availability_365 as string)like '%365%'\")\ntop5Arentals.createOrReplaceTempView(\"listingtemptable_365\")\ndf1=spark.sql(\" select * from listingtemptable_365 \")\n#df1.show()\ntop5Arentals1 = spark.sql(\"Select neighbourhood_group, neighbourhood, count(*) as count from listingtemptable_365 where neighbourhood in (Select neighbourhood  From listingtemptable_365 Group By neighbourhood_group, neighbourhood  order By avg(price) Limit 5)  group by neighbourhood_group, neighbourhood\")\n\ntop5Arentals1.show()\n\n","user":"anonymous","dateUpdated":"2020-01-10T11:56:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+-----+\n|neighbourhood_group|       neighbourhood|count|\n+-------------------+--------------------+-----+\n|        West Region|Western Water Cat...|    1|\n|        West Region|       Bukit Panjang|    1|\n|       North Region|           Woodlands|   12|\n|  North-East Region|           Serangoon|    8|\n|       North Region|        Lim Chu Kang|    1|\n+-------------------+--------------------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.3:4040/jobs/job?id=760","http://172.17.0.3:4040/jobs/job?id=761","http://172.17.0.3:4040/jobs/job?id=762","http://172.17.0.3:4040/jobs/job?id=763","http://172.17.0.3:4040/jobs/job?id=764","http://172.17.0.3:4040/jobs/job?id=765"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578652760298_1344402124","id":"20200110-103920_1075249585","dateCreated":"2020-01-10T10:39:20+0000","dateStarted":"2020-01-10T11:56:57+0000","dateFinished":"2020-01-10T11:56:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4263"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-01-10T11:19:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578652937720_-1791348719","id":"20200110-104217_1548641679","dateCreated":"2020-01-10T10:42:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4264"}],"name":"2019004_spark","id":"2EYTBNDP5","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}